# Workflow to build and deploy designer dashboard to server.
name: OpenGameData Features API CI
on:
  workflow_dispatch:
  release:
    types: released

env:
  DEPLOY_HOST: ${{ vars.OGD_SERVICES_HOST }}
  DEPLOY_DIR:  ${{ vars.WSGI_PATH }}/${{ vars.API_BASE_PATH }}/data/
  DEPLOY_URL:  ${{ vars.OGD_SERVICES_HOST }}/${{ vars.API_BASE_URL }}/data/data.wsgi
  URL_PATH:                                  ${{ vars.API_BASE_URL }}/data/data.wsgi

jobs:
  ci_deploy:
    name: CI Deploy of Feature APIs
    runs-on: ubuntu-22.04
    steps:

  # 1. Local checkout & config
    - uses: actions/checkout@v3
      with:
        submodules: 'true'
    - name: Set up Config File
      uses: ./.github/actions/API_config
      with:
        api_version: ${{ github.event.release.tag_name }}
        log_level: "INFO"
        app_path: "apps/features/data.wsgi"
        deploy_path: ${{ env.DEPLOY_DIR }}
    - name: Set up Core Config File
      uses: ./.github/actions/OGD_config
      with:
        sql_user: ${{ secrets.SQL_USER }}
        sql_pass: ${{ secrets.SQL_PASS }}
        ssh_host: ${{ vars.OGD_LOGGER_HOST }}
        ssh_user: ${{ secrets.VPN_USER }}
        ssh_pass: ${{ secrets.VPN_PASS }}
        slice_size: 1000
        log_level: "INFO"

  # 2. Build 

  # 3. Remote config & deploy
    - name: Get OpenConnect installed
      run: sudo apt-get -q update && sudo apt-get -q install openconnect
    - name: Connect VPN
      run: echo ${{ secrets.VPN_PASS }} | sudo openconnect --protocol=gp -u ${{ secrets.VPN_USER }} --passwd-on-stdin soe.vpn.wisc.edu &

    - name: Setup Access Key
      run: |
        mkdir -p ~/.ssh
        echo '${{secrets.DEPLOY_KEY}}' >> ./key.txt
        chmod 600 ./key.txt
    - name: Ensure directory exists
      run: ssh -o StrictHostKeyChecking=no -T -i ./key.txt ${{ secrets.DEPLOY_USER }}@${{ env.DEPLOY_HOST }} "mkdir -p ${{ env.DEPLOY_DIR }}"

    - name: Upload to web server via rsync
      uses: burnett01/rsync-deployments@5.2
      with:
        switches: -vrc --exclude-from rsync-exclude
        path: apps/features/*
        remote_path: ${{ env.DEPLOY_DIR }}
        remote_host: ${{ env.DEPLOY_HOST }}
        remote_user: ${{ secrets.DEPLOY_USER }}
        remote_key:  ${{ secrets.DEPLOY_KEY  }}
    - name: Upload OGD access key
      run: |
        echo '${{secrets.OGD_SELECTOR_BQ_KEY}}' >> ./ogd.json
        scp -o StrictHostKeyChecking=no -i ./key.txt ./ogd.json ${{ secrets.DEPLOY_USER }}@${{ env.DEPLOY_HOST }}:${{env.DEPLOY_DIR}}/config/ogd.json

  # 4. Cleanup & complete
    - name: Trigger Graceful Reboot
      run: ssh -o StrictHostKeyChecking=no -T -i ./key.txt ${{ secrets.DEPLOY_USER }}@${{ env.DEPLOY_HOST }} "sudo systemctl restart apache2"
    - name: Announce deploy
      run: echo "Deployed to ${{ env.DEPLOY_URL }}"
    - name: Upload logs as artifacts
      uses: actions/upload-artifact@v2
      with:
        path: ./*.log
